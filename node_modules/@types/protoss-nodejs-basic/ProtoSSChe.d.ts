declare namespace zetaret.node {
	export interface ProtoSSCheCTOR {
		new(): ProtoSSChe
	}
	export interface ProtoSSChe {
		env: object;
		htserv: XServer;
		acceptAppRequests: boolean;
		apps: object;
		cookieMethod: Function;
		requestMethod: Function;
		onErrorBody: Function;
		onEndBody: Function;
		dataJoin: string;
		reqIdLength: number;
		requestBodyMethods: Array<string>;

		getAppRequest(request: XRequest): Input
		onRequest(request: Input, response: Output): void
		onReadRequestBody(request: Input, body: string, response: Output): ProtoSSChe
		splitUrl(url: string): object
		rndstr(l: number): string
		getReqId(): string
		pushProtoSSResponse(request: Input, response: Output): ProtoSSChe
		readRequestBody(request: Input, response: Output): ProtoSSChe
		updateCookies(request: Input, response: Output, headers: object): ProtoSSChe
		endResponse(request: Input, response: Output): ProtoSSChe
	}
	export interface ServerModule {
		xpros: ServerModule;
		SERVERID: string;
		EVENTS: object;

		resetExtends(): void
		getExtends(): ProtoSSCheCTOR
		getExtendedServerProtoSS(ProtoSSChe: ProtoSSCheCTOR): ProtoSSCheCTOR
	}
	export interface ModuleInstance {
		serverche: ProtoSSChe;
		xpro: ServerModule;
		xprocls: ProtoSSCheCTOR;
		xmodule: string;
	}
	export interface ProtoSSCheModule {
		loadedModule: ServerModule;
		loadedModuleClass: ProtoSSCheCTOR;
		serverclass: ProtoSSCheCTOR;
		serverche: ProtoSSChe;

		setEnv(envobj: object): void
		resetFSInterval(): void
		stopFSInterval(): void
		getModuleInstance(xmodule: string): ModuleInstance
	}
}