declare namespace zetaret.node {
	export interface ProtoSSCheCTOR {
		new(): ProtoSSChe
	}
	export interface ProtoSSChe {
		env: ServerEnvironment;
		htserv: XServer;
		acceptAppRequests: boolean;
		apps: object;
		cookieMethod: Function;
		requestMethod: Function;
		onErrorBody: Function;
		onEndBody: Function;
		dataJoin: string;
		reqIdLength: number;
		requestBodyMethods: Array<string>;

		getAppRequest(request: XRequest): Input
		onRequest(request: Input, response: Output): void
		onReadRequestBody(request: Input, body: string, response: Output): ProtoSSChe
		splitUrl(url: string): SplitURL
		rndstr(l: number): string
		getReqId(): string
		pushProtoSSResponse(request: Input, response: Output): ProtoSSChe
		readRequestBody(request: Input, response: Output): ProtoSSChe
		updateCookies(request: Input, response: Output, headers: object): ProtoSSChe
		endResponse(request: Input, response: Output): ProtoSSChe
	}
	export interface ProtoSSCheModule {
		loadedModule: ServerModule;
		loadedModuleClass: ProtoSSCheCTOR;
		serverclass: ProtoSSCheCTOR;
		serverche: ProtoSSChe;

		setEnv(envobj: ServerEnvironment): void
		resetFSInterval(): void
		stopFSInterval(): void
		getModuleInstance(xmodule: string): ModuleInstance
	}
}