declare namespace zetaret.node.api {
	interface ChatControllerCTOR {
		new(): ChatController
	}
	interface ChatController extends APIController {
		messages: { [mid: string]: Array<ChatMessage> };
		autoDelete: WeakMap<object, ChatMessage>;
		db: ChatDB | object;
		install: Function;
		error: Function;
		defaults: Function;

		installDBInterface(method: Function): void
		handleError(method: Function): void
		onDefault(method: Function): void
		addMessage(user: string, msg: string): string
		buildMessage(user: string, message: string, mid?: string): ChatMessage
		appendMessage(mid: string, text: Array<string>, data?: object): ChatMessage
		addClient(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		getClients(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		editClient(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		sendMessage(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		getMessages(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		editMessages(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		addGroup(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		getGroups(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
		editGroups(server: zetaret.node.modules.Subserver, robj: zetaret.node.RouteObject, routeData: object, request: zetaret.node.XRequest, response: zetaret.node.RoutedResponseX): void
	}
	interface NullMessage {
		mid?: string;
	}
	interface ChatMessage extends NullMessage {
		user?: string;
		message?: string;
		time?: number;
		etime?: number;
		stream?: Array<StreamMessage | string | object>;
		groups?: Array<ChatGroup>;
		sent?: Array<ChatUser>;
	}
	interface StreamMessage {
		type?: string;
		data?: object;
		sid?: string;
	}
	interface CommentStream extends StreamMessage {
		comment?: ChatMessage;
		commentTarget?: ChatMessage;
		commentMid?: string;
	}
	interface IconStream extends StreamMessage {
		icon?: string;
	}
	interface FileStream extends StreamMessage {
		name?: string;
		mime?: string;
		filesize?: number;
	}
	interface ImageStream extends FileStream {
		imageURL?: string;
		imageBase64?: string;
		imageDBKeyChain?: Array<string>;
	}
	interface URLStream extends StreamMessage {
		url?: string;
		urlImage?: ImageStream;
	}
	interface BufferStream extends StreamMessage {
		buffer?: Array<object>;
		bits?: Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array;
		bufferTarget?: StreamMessage;
		bufferSid?: string;
	}
	interface ChatUser {
		uid?: string;
		vars?: object;
	}
	interface ChatGroup {
		gid?: string;
		users?: Array<string | ChatUser>;
		data?: object;
	}
	interface ChatDB {
		users: { [uid: string]: ChatUser };
		groups: { [gid: string]: ChatGroup };
		messages: { [uid: string]: Array<string | ChatMessage> };
		weak: WeakMap<ChatUser, Array<ChatMessage>>;
	}
	interface ChatControllerModule {
		ChatController: ChatControllerCTOR;
	}
}