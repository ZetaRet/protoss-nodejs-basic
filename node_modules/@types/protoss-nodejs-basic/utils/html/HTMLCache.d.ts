declare namespace zetaret.node.utils.html {
	export interface HTMLCacheCTOR {
		new(): HTMLCache
	}
	export interface HTMLCache {
		structs: object;
		autoStructPage: boolean;
		pages: object;
		despaceChars: object;
		despaceRules: object;
		watchFiles: boolean;
		watchOptions: object;
		watchListener: Function;
		watchMap: object;
		events: zetaret.node.utils.Emitter;

		setStruct(id: string, pagesOrStructIds: Array<object>): zetaret.node.utils.html.HTMLCache
		getStruct(id: string): string
		addPage(page: string, parser: zetaret.node.utils.html.HTMLParser, hfile: string, dir: string): object
		getPage(page: string): string
		exePage(page: string, cfg?: object): object
		renderContent(page: string): string
		resetBinders(page: string): void
		recache(page: string): void
		setPages(pages: object, HTMLParser: zetaret.node.utils.html.HTMLParser, watchers?: object, log?: boolean): void
		swapCSS(page: string, handler?: Function): void
		swapJS(page: string, handler?: Function): void
		defaultRenderTemplate(hcache: zetaret.node.utils.html.HTMLCache, page: string, pdata: object, hpinst: zetaret.node.utils.html.HTMLParser, cfg: object): void
		watch(listener: Function, options?: object): void
		getWatchers(listener?: Function, interval?: number, debug?: boolean, recacheOnChange?: boolean): object
		watchFile(pr: string, page: string, type: string): void
		resetWatchers(): void
		despace(v: string, type?: string): string
	}
}