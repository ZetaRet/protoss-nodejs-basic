{
	"ProtoSS Server Module": {
		"prefix": [
			"protoss",
			"protoss-server",
			"server-module",
			"new-server"
		],
		"body": [
			"var ${1:server};",
			"const xprosMod = require(global.${2:newserver}RequireModule || \"./${1:server}.js\");",
			"export const xpros = xprosMod;",
			"",
			"export const EVENTS = {",
			"};",
			"export const SERVERID = \"zetaret.node.modules::${2:newserver}\";",
			"",
			"export function getExtendedServerProtoSS(ProtoSSChe) {",
			"\tif (!${1:server}) ${1:server} = xpros.getExtendedServerProtoSS(ProtoSSChe);",
			"\treturn class ${2:newserver} extends ${1:server} {",
			"\t\tconstructor() {",
			"\t\t\tsuper();",
			"\t\t\tvar o = this;",
			"\t\t}",
			"\t};",
			"}",
			"",
			"module.exports.xpros = xpros;",
			"export const resetExtends = (): void => (${1:server} = null);",
			"export const getExtends = () => ${1:server};"
		],
		"description": "New ProtoSS Module Server."
	},
	"ProtoSS Import Router": {
		"prefix": [
			"import-router",
			"protoss-router"
		],
		"body": [
			"import { Router } from \"protoss-nodejs-basic/api/Router.js\";"
		],
		"description": "Import ProtoSS Router"
	},
	"ProtoSS New Router": {
		"prefix": [
			"router",
			"new-router",
			"protoss-router",
			"config-router"
		],
		"body": [
			"var ${1:routervar} = new Router();",
			"${1:routervar}.prefix = \"${2:routerprefix}\";",
			"${1:routervar}.addParamsPathListener(",
			"\t\"${3:route}\",",
			"\tfunction (server, robj, routeData, request, response) {",
			"\t},",
			"\t\"${4:GET}\",",
			"\ttrue",
			");",
			"",
			"${4:server}.addRouter(${1:routervar});"
		],
		"description": "New ProtoSS Router"
	},
	"ProtoSS Server Add Method Listener": {
		"prefix": [
			"server-add-listener",
			"server-method-listener",
			"protoss-server-listener"
		],
		"body": [
			"${1:server}.addMethodPathListener(\"${2:POST}\", \"${3:route}\", function (server, robj, routeData, request, response) {",
			"});"
		],
		"description": "Add Method Listener to ProtoSS Server"
	},
	"ProtoSS Server Add Params Listener": {
		"prefix": [
			"server-add-listener",
			"server-params-listener",
			"protoss-server-listener"
		],
		"body": [
			"${1:server}.addParamsPathListener(",
			"\t\"${2:route}\",",
			"\tfunction (server, robj, routeData, request, response) {",
			"\t},",
			"\t\"${3:GET}\",",
			"\ttrue",
			");"
		],
		"description": "Add Params Listener to ProtoSS Server"
	},
	"Module Polyfill": {
		"prefix": [
			"module",
			"module-require",
			"module-import",
			"module-filename",
			"module-dirname"
		],
		"body": [
			"import { createRequire } from \"module\";",
			"const require = createRequire(import.meta.url);",
			"",
			"import { fileURLToPath } from \"url\";",
			"import { dirname } from \"path\";",
			"",
			"const __filename = fileURLToPath(import.meta.url);",
			"const __dirname = dirname(__filename);"
		],
		"description": "Add missing functions of type module folders"
	},
	"Module Require": {
		"prefix": [
			"module",
			"module-require",
			"module-import"
		],
		"body": [
			"import { createRequire } from \"module\";",
			"const require = createRequire(import.meta.url);"
		],
		"description": "Add missing require function of type module folders"
	},
	"Module Dirname Filename": {
		"prefix": [
			"module",
			"module-filename",
			"module-dirname"
		],
		"body": [
			"import { fileURLToPath } from \"url\";",
			"import { dirname } from \"path\";",
			"",
			"const __filename = fileURLToPath(import.meta.url);",
			"const __dirname = dirname(__filename);"
		],
		"description": "Add missing dirname and filename of type module folders"
	}
}